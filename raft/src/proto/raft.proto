syntax = "proto3";

package raftpb;

// Example RequestVote RPC arguments structure.
message RequestVoteArgs {
    // Your data here (2A, 2B).
    uint64 term = 1;                // candidate's term
    uint64 candidate_id = 2;        // candidate requesting vote
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

// Example RequestVote RPC reply structure.
message RequestVoteReply {
    // Your data here (2A).
    uint64 term = 1;                // currentTerm, for candidate to update itself
    bool vote_granted = 2;          // true means candidate received vote
}

message AppendEntriesArgs {
    uint64 term = 1;                // leader's term
    uint64 leader_id = 2;           // so followers can redirect clients
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    uint64 leader_commit = 5;
    repeated Log entries = 6;
}

message AppendEntriesReply {
    uint64 term = 1;                // currentTerm, for leader to update itself
    bool success = 2;               // true if follower contained entry match
    uint64 conflict_index = 3;
    uint64 conflict_term = 4;
}

// 定义 InstallSnapshot RPC 参数
message InstallSnapshotArgs {
    uint64 term = 1;
    uint64 leader_id = 2;
    uint64 last_included_index = 3;
    uint64 last_included_term = 4;
    bytes data = 5;
}

// 定义 InstallSnapshot RPC 返回值
message InstallSnapshotReply {
    uint64 term = 1;
}

// 定义日志
message Log {
    uint64 term = 1;                // Leader 收到指令时候的任期号
    uint64 index = 2;               // 本 log 在 logs 中的索引
    bytes command = 3;              // 指令
}

// 定义Raft持久化结构
message RaftState {
    uint64 current_term = 1;
    oneof voted_for {uint64 voted = 2;}
    repeated Log entries = 3;
    uint64 last_included_index = 4;
    uint64 last_included_term = 5;
}